// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:

//Aregister**
Not(in=instruction[15], out=Ainstruction);
Or(a=Ainstruction, b=instruction[5], out=AinsructionOrDestEqA);
Mux16(a=ALUoutput, b=instruction, sel=Ainstruction, out=toAregister);
Register(in=toAregister, load=AinsructionOrDestEqA, out=Aregisteroutput, out[0..14]=addressM);


//**Dregister**
And(a=instruction[15], b=instruction[4], out=NotAandDest);
DRegister(in=ALUoutput, load= NotAandDest, out=Dregisteroutput); 

//**ALU**//
Mux16(a=Aregisteroutput,b=inM,sel=instruction[12], out= AorMinput);

ALU(x= Dregisteroutput, y= AorMinput,zx=instruction[11], nx=instruction[10],zy=instruction[9],ny=instruction[8],f=instruction[7],no=instruction[6], out=outM, out=ALUoutput, zr=zr, ng=ng);

//write to memory?
And(a=instruction[3], b=instruction[15], out=writeM);

//**program counter**//
PC(in=Aregisteroutput, load=jumpdecision, inc=true, reset=reset, out[0..14]=pc);


//***jumping decision making section of CPU***

/**
*tree for determining what jump command was put in.
*//

//DMux8Way(in=true, sel=instruction[0..2], a=noJMP, b=JGT, c=JEQ, d=JGE, e=JLT, g=JNE, g=JLE, h=JMP);]
DMux4Way(in=true, sel=instruction[1..2], a=first, b=second, c=third, d=fourth);
DMux(in=first, sel=instruction[0], a=noJMP, b=JGT);
DMux(in=second, sel=instruction[0], a=JEQ, b=JGE);
DMux(in=third, sel=instruction[0], a=JLT, b=JNE);
DMux(in=fourth, sel=instruction[0], a=JLE, b=JMP);




//tree for determining if the ALU output is positive, negative, or zero.
DMux(in=true, sel=zr, a=notZero, b=zero);
DMux(in=true, sel=ng, a=notNegative, b=negative);

//tests to see if any of the jump conditions have been met. 

And(a=notNegative, b=notZero, out=positive);
And(a=JGT, b=positive, out= JGTpositive);

And(a=JEQ, b=zero, out= JEQzero);

Or(a=zero, b=positive, out= zeroOrPositive);
And(a=JGE, b=zeroOrPositive, out= JGEzeroOrPositive);

And(a=JLT, b=negative, out= JLTnegative);

Not(in=zero, out=notzero);
And(a=JNE, b=notzero, out= JNEnotzero);

Or(a=zero, b=negative, out=zeroOrNegative);
And(a=JLE, b=zeroOrNegative, out= JLEzeroOrNegative);


/**
*if any of the previous outputs were 1, then "jump"
*will be 1. Then we need to check if our instruction was a C 
*instruction. This result will be stored in 
*"jump decision" and feed and sets the "load" parameter on the PC = 1
*/

Or8Way(in[0]=JMP, in[1]=JGTpositive,in[2]=JEQzero, in[3]=JGEzeroOrPositive
, in[4]=JLTnegative, in[5]=JNEnotzero ,in[6]= JLEzeroOrNegative
, in[7]=false, out= jumpp);

And(a=jumpp, b=instruction[15], out=jumpdecision);













}